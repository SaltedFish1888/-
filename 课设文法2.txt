程序 → { 声明 } { 函数定义 } { 语句 }EOF声明         → 类型 标识符 ['=' 表达式] ';'                          | 'const' 类型 标识符 '=' 表达式 ';'		     类型 → 'int' | 'bool' | 'float' | 'void' 函数定义 →  类型 'main' '(' ')' '{' {语句} '}'语句 → 赋值语句 | 分支语句 | 循环语句 | 声明赋值语句 → 标识符 '=' 表达式 ';'	分支语句          →  'if' '(' 布尔表达式 ')' '{' { 语句 } '}'	    while语句    → 'while' '(' 布尔表达式 ')' '{' {语句} '}'       doWhile语句  → 'do' '{' {语句} '}' 'while' '(' 布尔表达式 ')' ';' for语句      → 'for' '(' 赋值语句|声明  布尔表达式 ';' 表达式 ')' '{' {语句} '}'表达式            →  项 { ('+' | '-') 项 }项                →  因子 { ('*' | '/') 因子 }因子              →  '(' 表达式 ')' | 数字 | 标识符布尔表达式        →  逻辑或表达式                                            逻辑或表达式      →  逻辑与表达式 { '||' 逻辑与表达式 }逻辑与表达式      →  相等表达式 { '&&' 相等表达式 }相等表达式        →  关系表达式 [ ('==' | '!=') 关系表达式 ]关系表达式        →  表达式 [ ('<' | '<=' | '>' | '>=') 表达式 ]  符号说明：{} 表示可重复0次或多次[] 表示可选部分| 表示"或"关系? 表示可选（0次或1次）单引号内为终结符（关键字/运算符）中文为语法成分的非终结符名称答辩人：赖雨茹提问人1 ：胡青松 问题1：为什么在代码里面没有print相关的功能，在汇编时有打印出结果回答：在目标代码生成程序里添加了数字输出子程序提问人2：骆鞠恒 问题2：如何实现静态语义检查的回答：在语法分析阶段生成了语法树，通过语法树来检查，检查每个节点的'type'，调用相应的语义检查函数提问人3：刘宇轩 问题3：如何生成语法树回答：语法阶段采用的是递归下降方法分析，最开始函数根据输入的符号判断是否匹配规则。如果匹配，就生成一个语法树节点，否则报错，然后就这样递归下去，直到token表遍历完提问人4：魏嫣然 问题4：语义检查主要检查了什么内容回答：检查函数名，因为我的程序只允许定义main函数，检查变量是否已声明，在表达式或赋值语句检查其类型是否匹配声明类型等，完成了最基本的检查提问人5：柳子翔 问题5：如何生成中间代码的回答：自底向上遍历语法树，遇到需要跳转的语句就生成一个标签，用于后面的跳转，遇到赋值或运算的语句，就生成一个临时变量保存结果